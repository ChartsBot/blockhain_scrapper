<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- info -->
    <parent>
        <groupId>com.chartsbot.blockhain-scrapper</groupId>
        <artifactId>parent</artifactId>
        <version>0.1.0</version>
    </parent>

    <artifactId>bch-blocks-indexer</artifactId>
    <version>0.1.0</version>
    <packaging>jar</packaging>

    <organization>
        <name>ChartsBot</name>
        <url>https://test.com/</url>
    </organization>

    <developers>
        <developer>
            <name>Ben</name>
            <email>rotted_ben@protonmail.com</email>
            <organization>ChartsBot</organization>
            <organizationUrl>https://test.com/</organizationUrl>
        </developer>
    </developers>

    <properties>
        <maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>

        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <encoding>UTF-8</encoding>

        <timestamp>${maven.build.timestamp}</timestamp>
        <maven.build.timestamp.format>yyyyMMddHHmm</maven.build.timestamp.format>

        <!-- versions -->

        <scala.logging.version>3.9.2</scala.logging.version>
        <typesafe.config>1.4.1</typesafe.config>
        <slf4j-api.version>1.7.25</slf4j-api.version>
        <scala-logging.version>3.9.2</scala-logging.version>
        <logback-classic.version>1.2.3</logback-classic.version>
        <logstash-logback-encoder.version>5.3</logstash-logback-encoder.version>

        <scala.version>2.12.8</scala.version>
        <scala.compact.version>2.12</scala.compact.version>

        <scalatest.version>3.2.3</scalatest.version>
        <scalactic.version>3.2.3</scalactic.version>


        <javaxServlet.version>3.1.0</javaxServlet.version>

        <json4s.version>3.6.7</json4s.version>
        <resteasy.version>3.6.3.Final</resteasy.version>

        <build.number>${timestamp}-dev</build.number>

        <!-- plugins -->
        <maven-dependency-plugin.version>2.8</maven-dependency-plugin.version>
        <scalariform.version>0.2.2</scalariform.version>
        <scala-maven-plugin.version>3.3.2</scala-maven-plugin.version>
        <maven-surefire-plugin.version>2.7</maven-surefire-plugin.version>
        <scalatest-maven-plugin.version>1.0</scalatest-maven-plugin.version>
        <maven-jar-plugin.version>2.6</maven-jar-plugin.version>
        <maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>
        <dockerfile-maven-plugin.version>1.4.4</dockerfile-maven-plugin.version>
        <!-- /plugins -->

        <!-- /versions -->

        <jwt-core.version>3.1.0</jwt-core.version>
        <jose4j.version>0.6.5</jose4j.version>

        <jetty-servlets.version>9.4.19.v20190610</jetty-servlets.version>

        <guice.version>4.2.3</guice.version>

        <quill.version>3.6.0</quill.version>

        <akka.version>2.6.10</akka.version>
        <akka.http.version>10.2.0</akka.http.version>


    </properties>


    <dependencies>
        <!-- Scala -->

        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
            <version>${scala.version}</version>
        </dependency>

        <!-- Scala -->

        <!-- Logging -->
        <dependency>
            <groupId>com.typesafe.scala-logging</groupId>
            <artifactId>scala-logging_${scala.compact.version}</artifactId>
            <version>${scala.logging.version}</version>
        </dependency>

        <dependency>
            <groupId>com.typesafe</groupId>
            <artifactId>config</artifactId>
            <version>${typesafe.config}</version>
        </dependency>


        <!-- region the underlying logging framework -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j-api.version}</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback-classic.version}</version>
        </dependency>
        <dependency>
            <groupId>net.logstash.logback</groupId>
            <artifactId>logstash-logback-encoder</artifactId>
            <version>${logstash-logback-encoder.version}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.9.10.6</version>
        </dependency>

        <!-- /Logging -->

        <!-- Json4s -->

        <dependency>
            <groupId>org.json4s</groupId>
            <artifactId>json4s-native_${scala.compact.version}</artifactId>
            <version>${json4s.version}</version>
        </dependency>

        <dependency>
            <groupId>org.json4s</groupId>
            <artifactId>json4s-jackson_${scala.compact.version}</artifactId>
            <version>${json4s.version}</version>
        </dependency>

        <!-- /Json4s -->


        <!-- https://mvnrepository.com/artifact/org.scalatest/scalatest -->
        <dependency>
            <groupId>org.scalatest</groupId>
            <artifactId>scalatest_2.12</artifactId>
            <version>${scalatest.version}</version>
            <scope>test</scope>
        </dependency>


        <dependency>
            <groupId>org.scalactic</groupId>
            <artifactId>scalactic_${scala.compact.version}</artifactId>
            <version>${scalactic.version}</version>
        </dependency>


        <!-- https://mvnrepository.com/artifact/io.getquill/quill-core -->
        <dependency>
            <groupId>io.getquill</groupId>
            <artifactId>quill-core_2.12</artifactId>
            <version>${quill.version}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/io.getquill/quill-jdbc -->
        <dependency>
            <groupId>io.getquill</groupId>
            <artifactId>quill-jdbc_2.12</artifactId>
            <version>${quill.version}</version>
        </dependency>


        <!-- https://mvnrepository.com/artifact/io.getquill/quill-async-mysql -->
        <dependency>
            <groupId>io.getquill</groupId>
            <artifactId>quill-async-mysql_2.12</artifactId>
            <version>${quill.version}</version>
        </dependency>


        <!--        &lt;!&ndash; https://mvnrepository.com/artifact/mysql/mysql-connector-java &ndash;&gt;-->
        <!--        <dependency>-->
        <!--            <groupId>mysql</groupId>-->
        <!--            <artifactId>mysql-connector-java</artifactId>-->
        <!--            <version>8.0.22</version>-->
        <!--        </dependency>-->

        <!--        TEST embedded mysql-->

        <dependency>
            <groupId>com.wix</groupId>
            <artifactId>wix-embedded-mysql</artifactId>
            <version>4.6.1</version>
        </dependency>


        <!-- https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client -->
        <dependency>
            <groupId>org.mariadb.jdbc</groupId>
            <artifactId>mariadb-java-client</artifactId>
            <version>2.7.1</version>
        </dependency>



        <!-- Guice -->
        <dependency>
            <groupId>com.google.inject</groupId>
            <artifactId>guice</artifactId>
            <version>${guice.version}</version>
        </dependency>


        <!-- akka -->

        <!-- https://mvnrepository.com/artifact/com.typesafe.akka/akka-stream -->
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-stream_2.12</artifactId>
            <version>${akka.version}</version>
        </dependency>

        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-testkit_2.12</artifactId>
            <version>${akka.version}</version>
        </dependency>

        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-actor-typed_2.12</artifactId>
            <version>${akka.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-discovery_2.12</artifactId>
            <version>${akka.version}</version>
        </dependency>

        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-pki_2.12</artifactId>
            <version>${akka.version}</version>
        </dependency>

        <!-- // The Akka HTTP overwrites are required because Akka-gRPC depends on 10.1.x -->
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-http-core_${scala.compact.version}</artifactId>
            <version>${akka.http.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-http_${scala.compact.version}</artifactId>
            <version>${akka.http.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-http2-support_${scala.compact.version}</artifactId>
            <version>${akka.http.version}</version>
        </dependency>


        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-actor-testkit-typed_${scala.compact.version}</artifactId>
            <version>${akka.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-stream-testkit_${scala.compact.version}</artifactId>
            <version>${akka.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- web3 -->
        <dependency>
            <groupId>org.web3j</groupId>
            <artifactId>core</artifactId>
            <version>4.8.7</version>
        </dependency>


        <!-- sttp -->
        <!-- https://mvnrepository.com/artifact/com.softwaremill.sttp.client3/core -->
        <dependency>
            <groupId>com.softwaremill.sttp.client3</groupId>
            <artifactId>core_2.12</artifactId>
            <version>3.1.0</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.softwaremill.sttp.client3/core -->
        <dependency>
            <groupId>com.softwaremill.sttp.client3</groupId>
            <artifactId>json4s_2.12</artifactId>
            <version>3.1.0</version>
        </dependency>

        <!-- Lombok @synchronoized annotations for custom java web3j websocket -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.20</version>
            <scope>provided</scope>
        </dependency>



    </dependencies>

    <licenses>
        <license>
            <name>MIT License</name>
            <url>http://www.opensource.org/licenses/mit-license.php</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <repositories>
        <repository>
            <id>ossrh</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </repository>
        <repository>
            <id>jitpack</id>
            <url>https://jitpack.io</url>
        </repository>
    </repositories>

    <!-- dependencies -->

    <build>
        <sourceDirectory>src/main/</sourceDirectory>
        <plugins>

            <!-- scala compiler -->
            <plugin>
                <groupId>net.alchim31.maven</groupId>
                <artifactId>scala-maven-plugin</artifactId>
                <version>${scala-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <recompileMode>incremental</recompileMode>
                    <args>
                        <arg>-deprecation</arg>                      <!--  Emit warning and location for usages of deprecated APIs. -->
                        <arg>-encoding</arg> <arg>utf-8</arg>        <!--  Specify character encoding used by source files. -->
                        <arg>-explaintypes</arg>                     <!--  Explain type errors in more detail. -->
                        <arg>-feature</arg>                          <!--  Emit warning and location for usages of features that should be imported explicitly. -->
                        <arg>-unchecked</arg>                        <!--  Enable additional warnings where generated code depends on assumptions. -->
                        <arg>-Xcheckinit</arg>                       <!--  Wrap field accessors to throw an exception on uninitialized access. -->
                        <arg>-Xfuture</arg>                          <!--  Turn on future language features. -->
                        <arg>-Xlint:adapted-args</arg>               <!--  Warn if an argument list is modified to match the receiver. -->
                        <arg>-Xlint:by-name-right-associative</arg>  <!--  By-name parameter of right associative operator. -->
                        <arg>-Xlint:constant</arg>                   <!--  Evaluation of a constant arithmetic expression results in an error. -->
                        <arg>-Xlint:delayedinit-select</arg>         <!--  Selecting member of DelayedInit. -->
                        <arg>-Xlint:doc-detached</arg>               <!--  A Scaladoc comment appears to be detached from its element. -->
                        <arg>-Xlint:inaccessible</arg>               <!--  Warn about inaccessible types in method signatures. -->
                        <arg>-Xlint:infer-any</arg>                  <!--  Warn when a type argument is inferred to be `Any`. -->
                        <arg>-Xlint:missing-interpolator</arg>       <!--  A string literal appears to be missing an interpolator id. -->
                        <arg>-Xlint:nullary-override</arg>           <!--  Warn when non-nullary `def f()' overrides nullary `def f'. -->
                        <arg>-Xlint:nullary-unit</arg>               <!--  Warn when nullary methods return Unit. -->
                        <arg>-Xlint:option-implicit</arg>            <!--  Option.apply used implicit view. -->
                        <arg>-Xlint:package-object-classes</arg>     <!--  Class or object defined in package object. -->
                        <arg>-Xlint:poly-implicit-overload</arg>     <!--  Parameterized overloaded implicit methods are not visible as view bounds. -->
                        <arg>-Xlint:private-shadow</arg>             <!--  A private field (or class parameter) shadows a superclass field. -->
                        <arg>-Xlint:stars-align</arg>                <!--  Pattern sequence wildcard must align with sequence component. -->
                        <arg>-Xlint:type-parameter-shadow</arg>      <!--  A local type parameter shadows a type already in scope. -->
                        <arg>-Xlint:unsound-match</arg>              <!--  Pattern match may not be typesafe. -->
                        <arg>-Yno-adapted-args</arg>                 <!--  Do not adapt an argument list (either by inserting () or creating a tuple) to match the receiver. -->
                        <arg>-Ypartial-unification</arg>             <!--  Enable partial unification in type constructor inference -->
                        <arg>-Ywarn-dead-code</arg>                  <!--  Warn when dead code is identified. -->
                        <arg>-Ywarn-extra-implicit</arg>             <!--  Warn when more than one implicit parameter section is defined. -->
                        <arg>-Ywarn-inaccessible</arg>               <!--  Warn about inaccessible types in method signatures. -->
                        <arg>-Ywarn-infer-any</arg>                  <!--  Warn when a type argument is inferred to be `Any`. -->
                        <arg>-Ywarn-nullary-override</arg>           <!--  Warn when non-nullary `def f()' overrides nullary `def f'. -->
                        <arg>-Ywarn-nullary-unit</arg>               <!--  Warn when nullary methods return Unit. -->
                        <arg>-Ywarn-numeric-widen</arg>              <!--  Warn when numerics are widened. -->
                        <arg>-Ywarn-unused:implicits</arg>           <!--  Warn if an implicit parameter is unused. -->
                        <arg>-Ywarn-unused:imports</arg>             <!--  Warn if an import selector is not referenced. -->
                        <arg>-Ywarn-unused:locals</arg>              <!--  Warn if a local definition is unused. -->
                        <arg>-Ywarn-unused:params</arg>              <!--  Warn if a value parameter is unused. -->
                        <arg>-Ywarn-unused:patvars</arg>             <!--  Warn if a variable bound in a pattern is unused. -->
                        <arg>-Ywarn-unused:privates</arg>            <!--  Warn if a private member is unused. -->
                        <arg>-Ywarn-value-discard</arg>              <!--  Warn when non-Unit expression results are unused. -->
                        <arg>-feature</arg>
                        <arg>-unchecked</arg>
                        <arg>-deprecation</arg>
                        <arg>-dependencyfile</arg>
                        <arg>${project.build.directory}/.scala_dependencies</arg>
                    </args>
                </configuration>
            </plugin>

            <!-- code formatting -->
            <plugin>
                <groupId>com.github.tashoyan</groupId>
                <artifactId>scalariform-maven-plugin</artifactId>
                <version>${scalariform.version}</version>
                <executions>
                    <execution>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>format</goal>
                        </goals>
                        <configuration>
                            <firstArgumentOnNewline>Force</firstArgumentOnNewline>
                            <firstParameterOnNewline>Force</firstParameterOnNewline>
                            <allowParamGroupsOnNewlines>true</allowParamGroupsOnNewlines>
                            <danglingCloseParenthesis>Force</danglingCloseParenthesis>
                            <doubleIndentConstructorArguments>true</doubleIndentConstructorArguments>
                            <doubleIndentMethodDeclaration>true</doubleIndentMethodDeclaration>
                            <newlineAtEndOfFile>true</newlineAtEndOfFile>
                            <placeScaladocAsterisksBeneathSecondAsterisk>true
                            </placeScaladocAsterisksBeneathSecondAsterisk>
                            <singleCasePatternOnNewline>false</singleCasePatternOnNewline>
                            <spacesAroundMultiImports>true</spacesAroundMultiImports>
                            <rewriteArrowSymbols>false</rewriteArrowSymbols>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- code formatting -->

            <!-- disable surefire -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>

            <!-- copy all dependencies into the target/lib dir for our docker image -->
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>${maven-dependency-plugin.version}</version>
                <executions>
                    <execution>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <overWriteReleases>false</overWriteReleases>
                            <includeScope>runtime</includeScope>
                            <outputDirectory>target/lib</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.scalatest</groupId>
                <artifactId>scalatest-maven-plugin</artifactId>
                <version>${scalatest-maven-plugin.version}</version>
                <configuration>
                    <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
                    <junitxml>.</junitxml>
                    <filereports>WDF TestSuite.txt</filereports>
                    <skipTests>true</skipTests>
                </configuration>
                <executions>
                    <execution>
                        <id>test</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${maven-jar-plugin.version}</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                            <mainClass>com.chartsbot.Service</mainClass>
                            <useUniqueVersions>false</useUniqueVersions>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>

            <!-- for mvn deploy to work, disable the default deploy plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>${maven-deploy-plugin.version}</version>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.6.0</version>
                <executions>
                    <execution>
                        <id>server</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>java</executable>
                            <arguments>
                                <argument>-classpath</argument>
                                <classpath />
                                <argument>com.chartsbot.services.FileHandlerServer</argument>
                            </arguments>
                        </configuration>
                    </execution>


                    <execution>
                        <id>client</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>java</executable>
                            <arguments>
                                <argument>-classpath</argument>
                                <classpath />
                                <argument>com.chartsbot.Service</argument>
                                <!--<argument>${TestClient.user}</argument>-->
                            </arguments>
                        </configuration>
                    </execution>
                </executions>

            </plugin>

            <!--             create and/or push the created docker image-->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>${dockerfile-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>default</id>
                        <goals>
                            <goal>build</goal>
                            <goal>push</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <buildDirectory>target/classes</buildDirectory>
                    <repository>fomoinc/fomobot-blockchain-scrapper</repository>
                    <tag>${build.number}</tag>
                    <tag>latest</tag>
                    <buildArgs>
                        <VERSION>${project.version}</VERSION>
                        <BUILD>${build.number}</BUILD>
                        <SERVICE_NAME>${project.name}</SERVICE_NAME>
                        <JAR_LIBS>target/lib</JAR_LIBS>
                        <JAR_FILE>target/${project.build.finalName}.${project.packaging}</JAR_FILE>
<!--                        <JAR_FILE>target/${project.artifactId}-${project.version}.${project.packaging}</JAR_FILE>-->
                    </buildArgs>
                </configuration>
            </plugin>

            <!-- echo maven properties -->
<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-antrun-plugin</artifactId>-->
<!--                <version>1.7</version>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <phase>validate</phase>-->
<!--                        <goals>-->
<!--                            <goal>run</goal>-->
<!--                        </goals>-->
<!--                        <configuration>-->
<!--                            <tasks>-->
<!--                                <echoproperties />-->
<!--                            </tasks>-->
<!--                        </configuration>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->

        </plugins>
    </build>

</project>

