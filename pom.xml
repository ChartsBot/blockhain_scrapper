<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- info -->
    <groupId>com.chartsbot.blockhain-scrapper</groupId>
    <artifactId>parent</artifactId>
    <version>0.1.0</version>
    <packaging>pom</packaging>

    <modules>
        <module>bch-blocks-indexer</module>
        <module>bch-watcher</module>
    </modules>

    <organization>
        <name>ChartsBot</name>
        <url>https://test.com/</url>
    </organization>
    <developers>
        <developer>
            <name>Ben</name>
            <email>rotted_ben@protonmail.com</email>
            <organization>ChartsBot</organization>
            <organizationUrl>https://test.com/</organizationUrl>
        </developer>
    </developers>

    <properties>
        <maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>

        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <encoding>UTF-8</encoding>

        <timestamp>${maven.build.timestamp}</timestamp>
        <maven.build.timestamp.format>yyyyMMddHHmm</maven.build.timestamp.format>

        <scala.version>2.12.8</scala.version>
        <scala.compact.version>2.12</scala.compact.version>

        <!-- plugins -->
        <maven-dependency-plugin.version>2.8</maven-dependency-plugin.version>
        <scala-maven-plugin.version>3.3.2</scala-maven-plugin.version>
        <maven-surefire-plugin.version>2.7</maven-surefire-plugin.version>

    </properties>


    <dependencies>
        <!-- Scala -->
        <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
            <version>${scala.version}</version>
        </dependency>
    </dependencies>

    <licenses>
        <license>
            <name>MIT License</name>
            <url>http://www.opensource.org/licenses/mit-license.php</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <repositories>
        <repository>
            <id>ossrh</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </repository>
        <repository>
            <id>jitpack</id>
            <url>https://jitpack.io</url>
        </repository>
    </repositories>

    <!-- dependencies -->

    <build>
        <sourceDirectory>src/main/scala</sourceDirectory>
        <plugins>

            <!-- scala compiler -->
            <plugin>
                <groupId>net.alchim31.maven</groupId>
                <artifactId>scala-maven-plugin</artifactId>
                <version>${scala-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <recompileMode>incremental</recompileMode>
                    <args>
                        <arg>-deprecation</arg>                      <!--  Emit warning and location for usages of deprecated APIs. -->
                        <arg>-encoding</arg> <arg>utf-8</arg>        <!--  Specify character encoding used by source files. -->
                        <arg>-explaintypes</arg>                     <!--  Explain type errors in more detail. -->
                        <arg>-feature</arg>                          <!--  Emit warning and location for usages of features that should be imported explicitly. -->
                        <arg>-unchecked</arg>                        <!--  Enable additional warnings where generated code depends on assumptions. -->
                        <arg>-Xcheckinit</arg>                       <!--  Wrap field accessors to throw an exception on uninitialized access. -->
                        <arg>-Xfuture</arg>                          <!--  Turn on future language features. -->
                        <arg>-Xlint:adapted-args</arg>               <!--  Warn if an argument list is modified to match the receiver. -->
                        <arg>-Xlint:by-name-right-associative</arg>  <!--  By-name parameter of right associative operator. -->
                        <arg>-Xlint:constant</arg>                   <!--  Evaluation of a constant arithmetic expression results in an error. -->
                        <arg>-Xlint:delayedinit-select</arg>         <!--  Selecting member of DelayedInit. -->
                        <arg>-Xlint:doc-detached</arg>               <!--  A Scaladoc comment appears to be detached from its element. -->
                        <arg>-Xlint:inaccessible</arg>               <!--  Warn about inaccessible types in method signatures. -->
                        <arg>-Xlint:infer-any</arg>                  <!--  Warn when a type argument is inferred to be `Any`. -->
                        <arg>-Xlint:missing-interpolator</arg>       <!--  A string literal appears to be missing an interpolator id. -->
                        <arg>-Xlint:nullary-override</arg>           <!--  Warn when non-nullary `def f()' overrides nullary `def f'. -->
                        <arg>-Xlint:nullary-unit</arg>               <!--  Warn when nullary methods return Unit. -->
                        <arg>-Xlint:option-implicit</arg>            <!--  Option.apply used implicit view. -->
                        <arg>-Xlint:package-object-classes</arg>     <!--  Class or object defined in package object. -->
                        <arg>-Xlint:poly-implicit-overload</arg>     <!--  Parameterized overloaded implicit methods are not visible as view bounds. -->
                        <arg>-Xlint:private-shadow</arg>             <!--  A private field (or class parameter) shadows a superclass field. -->
                        <arg>-Xlint:stars-align</arg>                <!--  Pattern sequence wildcard must align with sequence component. -->
                        <arg>-Xlint:type-parameter-shadow</arg>      <!--  A local type parameter shadows a type already in scope. -->
                        <arg>-Xlint:unsound-match</arg>              <!--  Pattern match may not be typesafe. -->
                        <arg>-Yno-adapted-args</arg>                 <!--  Do not adapt an argument list (either by inserting () or creating a tuple) to match the receiver. -->
                        <arg>-Ypartial-unification</arg>             <!--  Enable partial unification in type constructor inference -->
                        <arg>-Ywarn-dead-code</arg>                  <!--  Warn when dead code is identified. -->
                        <arg>-Ywarn-extra-implicit</arg>             <!--  Warn when more than one implicit parameter section is defined. -->
                        <arg>-Ywarn-inaccessible</arg>               <!--  Warn about inaccessible types in method signatures. -->
                        <arg>-Ywarn-infer-any</arg>                  <!--  Warn when a type argument is inferred to be `Any`. -->
                        <arg>-Ywarn-nullary-override</arg>           <!--  Warn when non-nullary `def f()' overrides nullary `def f'. -->
                        <arg>-Ywarn-nullary-unit</arg>               <!--  Warn when nullary methods return Unit. -->
                        <arg>-Ywarn-numeric-widen</arg>              <!--  Warn when numerics are widened. -->
                        <arg>-Ywarn-unused:implicits</arg>           <!--  Warn if an implicit parameter is unused. -->
                        <arg>-Ywarn-unused:imports</arg>             <!--  Warn if an import selector is not referenced. -->
                        <arg>-Ywarn-unused:locals</arg>              <!--  Warn if a local definition is unused. -->
                        <arg>-Ywarn-unused:params</arg>              <!--  Warn if a value parameter is unused. -->
                        <arg>-Ywarn-unused:patvars</arg>             <!--  Warn if a variable bound in a pattern is unused. -->
                        <arg>-Ywarn-unused:privates</arg>            <!--  Warn if a private member is unused. -->
                        <arg>-Ywarn-value-discard</arg>              <!--  Warn when non-Unit expression results are unused. -->
                        <arg>-feature</arg>
                        <arg>-unchecked</arg>
                        <arg>-deprecation</arg>
                        <arg>-dependencyfile</arg>
                        <arg>${project.build.directory}/.scala_dependencies</arg>
                    </args>
                </configuration>
            </plugin>

            <!-- disable surefire -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>

            <!-- copy all dependencies into the target/lib dir for our docker image -->
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>${maven-dependency-plugin.version}</version>
                <executions>
                    <execution>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <overWriteReleases>false</overWriteReleases>
                            <includeScope>runtime</includeScope>
                            <outputDirectory>../target/lib</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>


            <!-- for mvn deploy to work, disable the default deploy plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>${maven-deploy-plugin.version}</version>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>

